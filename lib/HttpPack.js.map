{"version":3,"sources":["../src/HttpPack.js"],"names":["Protocol","HttpPack","constructor","options","db","handlePacket","scope","packet","callback","msgType","MSG_TYPE_SEND","qos","QoS0","payload","QoS1","replyPacket","Encode","MSG_TYPE_ACK","identifier","savePacket","then","bind","QoS2","receivePacket","MSG_TYPE_RECEIVED","confirmPacket","MSG_TYPE_RELEASE","releasePacket","undefined","MSG_TYPE_COMPLETED","generateRetryPacket","retryTimes","retryPacket","cloneDeep","timestamp","add","unix","splitBuffer","buffer","packets","length","offset","Decode","push","totalLength","combinePacket","buffers","map","Buffer","concat","parseBody","body","nullString","Promise","resolve","waitHandles","all","respondPackets","unconfirmedPacket","commit","generateId","id"],"mappings":"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","file":"HttpPack.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\n\nimport Database from './Database';\nimport * as Protocol from './Protocol';\n\nexport default class HttpPack{\n    constructor(options){\n        this.db = new Database(options);\n    }\n\n    handlePacket(scope, packet, callback){\n        if(packet.msgType == Protocol.MSG_TYPE_SEND){\n            if(packet.qos == Protocol.QoS0){\n                callback(scope, packet.payload);\n                return null;\n            } else if(packet.qos == Protocol.QoS1){\n                let replyPacket = Protocol.Encode(Protocol.MSG_TYPE_ACK, Protocol.QoS0, 0, packet.identifier);\n                return this.db.savePacket(scope, replyPacket).then(function(){\n                    callback(scope, packet.payload);\n                }.bind(this));\n            } else if(packet.qos == Protocol.QoS2){\n                return this.db.receivePacket(scope, packet.identifier, packet.payload).then(function(){\n                    let replyPacket = Protocol.Encode(Protocol.MSG_TYPE_RECEIVED, Protocol.QoS0, 0, packet.identifier);\n                    return this.db.savePacket(scope, replyPacket);\n                }.bind(this));\n            }\n        } else if(packet.msgType == Protocol.MSG_TYPE_ACK){\n            return this.db.confirmPacket(scope, packet.identifier);\n        } else if(packet.msgType == Protocol.MSG_TYPE_RECEIVED){\n            return this.db.confirmPacket(scope, packet.identifier).then(function(){\n                let replyPacket = Protocol.Encode(Protocol.MSG_TYPE_RELEASE, Protocol.QoS1, 0, packet.identifier);\n                return this.db.savePacket(scope, replyPacket);\n            }.bind(this));      \n        } else if(packet.msgType == Protocol.MSG_TYPE_RELEASE){\n            return this.db.releasePacket(scope, packet.identifier).then(function(payload){\n                if(payload != undefined){\n                    callback(scope, payload);\n                }\n                let replyPacket = Protocol.Encode(Protocol.MSG_TYPE_COMPLETED, Protocol.QoS0, 0, packet.identifier);\n                return this.db.savePacket(scope, replyPacket);\n            }.bind(this));\n        } else if(packet.msgType == Protocol.MSG_TYPE_COMPLETED){\n            return this.db.confirmPacket(scope, packet.identifier);\n        }\n    }\n\n    generateRetryPacket(packet){\n        if(packet.qos == Protocol.QoS0){\n            return null;\n        } else {\n            if(packet.retryTimes != undefined && packet.retryTimes > 0) {\n                let retryPacket = _.cloneDeep(packet);\n                retryPacket.retryTimes++;\n                retryPacket.timestamp = moment().add(retryPacket.retryTimes * 5, 's').unix();\n                return retryPacket;\n            } else {\n                let retryPacket = Protocol.Encode(\n                    packet.msgType, packet.qos, 1, packet.identifier, packet.payload);\n                retryPacket.retryTimes = 1;\n                retryPacket.timestamp = moment().add(retryPacket.retryTimes * 5, 's').unix();\n                return retryPacket;\n            }\n        }\n    }\n\n    splitBuffer(buffer){\n        let packets = [];\n        let length = buffer.length;\n        let offset = 0;\n        while(offset < buffer.length){\n            let packet = Protocol.Decode(buffer, offset);\n            packets.push(packet);\n            offset += packet.totalLength;\n        }\n        return packets;\n    }\n\n    combinePacket(packets){\n        let buffers = _.map(packets, function(packet){\n            return packet.buffer;\n        }.bind(this));\n        return Buffer.concat(buffers);\n    }\n\n    // Public method\n\n    parseBody(scope, body, callback){\n        if(body == undefined){\n            let nullString = new Buffer('', 'utf-8');\n            return Promise.resolve(nullString);\n        }\n        body = new Buffer(body, 'utf-8');\n        let packets = this.splitBuffer(body);\n        let waitHandles = _.map(packets, function(packet){\n            return this.handlePacket(scope, packet, callback);\n        }.bind(this));\n\n        // build response body\n        return Promise.all(waitHandles).then(function(){\n            let respondPackets = this.db.unconfirmedPacket(scope, 5);\n            return respondPackets.then(function(packets){\n                let waitHandles = _.map(packets, function(packet){\n                    let retryPacket = this.generateRetryPacket(packet);\n                    if(retryPacket != undefined){\n                        return this.db.savePacket(scope, retryPacket).then(function(){\n                            return packet;\n                        });\n                    }\n                    return packet;\n                }.bind(this));\n                return Promise.all(waitHandles).then(function(packets){\n                    return this.combinePacket(packets);\n                }.bind(this));\n            }.bind(this));\n        }.bind(this));\n    }\n\n    commit(scope, payload, qos=Protocol.QoS0){\n        if(typeof payload == 'string'){\n            payload = new Buffer(payload, 'utf-8');\n        }\n        this.db.generateId(scope).then(function(id){\n            let packet = Protocol.Encode(\n                Protocol.MSG_TYPE_SEND, qos, 0, id, payload);\n            this.db.savePacket(scope, packet);\n        }.bind(this));\n    }\n}"]}