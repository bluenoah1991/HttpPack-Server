{"version":3,"sources":["../src/Database.js"],"names":["promisifyAll","RedisClient","prototype","Multi","PQADD","PQPOP","PQREM","HPOP","Database","constructor","options","undefined","namespace","assign","return_buffers","client","createClient","_encodePacket","packet","bufferLength","buffer","length","rawBuffer","Buffer","allocUnsafe","writeUInt8","retryTimes","writeUInt32BE","timestamp","copy","_decodePacket","readInt8","readUInt32BE","generateId","scope","incrAsync","then","i","evalScore","savePacket","evalAsync","identifier","unconfirmedPacket","limit","now","unix","buffers","map","bind","confirmPacket","receivePacket","payload","hsetAsync","releasePacket"],"mappings":"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","file":"Database.js","sourcesContent":["import redis from 'redis';\nimport bluebird from 'bluebird';\nbluebird.promisifyAll(redis.RedisClient.prototype);\nbluebird.promisifyAll(redis.Multi.prototype);\nimport _ from 'lodash';\nimport moment from 'moment';\n\nimport {Encode, Decode} from './Protocol';\n\n/**\n * Add to Indexable Priority Queue\n * Example:\n * \n * EVAL PQADD 1 ns 999 msgid bufferstring\n * \n * Parameters\n * \n * Keys 1. Namespace\n * Args 1. Sorted Set Score\n * Args 2. Identifier\n * Args 3. Value\n */\nconst PQADD = \"redis.call('ZADD', KEYS[1]..':pq', ARGV[1], ARGV[2])\\n\" +\n    \"redis.call('HSET', KEYS[1]..':index', ARGV[2], ARGV[3])\";\n\n/**\n * Popup N item from Indexable Priority Queue\n * Example:\n * \n * EVAL PQPOP 1 ns 10 1483598266\n * \n * Parameters\n * \n * Keys 1. Namespace\n * Args 1. Limit\n * Args 2. Now\n */\nconst PQPOP = \"local t = {}\\n\" +\n    \"local len = 0\\n\" +\n    \"local key = nil\\n\" +\n    \"for i, k in pairs(redis.call('ZRANGE', KEYS[1]..':pq', 0, ARGV[1], 'WITHSCORES')) do\\n\" +\n        \"if i % 2 == 1 then\\n\" +\n            \"key = k\\n\" +\n        \"else\\n\" +\n            \"if tonumber(ARGV[2]) < tonumber(k) then break end\\n\" +\n            \"len = len + 1\\n\" +\n            \"local v = redis.call('HGET', KEYS[1]..':index', key)\\n\" +\n            \"table.insert(t, #t + 1, v)\\n\" +\n        \"end\\n\" +\n    \"end\\n\" +\n    \"if len > 0 then\\n\" +\n        \"redis.call('ZREMRANGEBYRANK', KEYS[1]..':pq', 0, len)\\n\" +\n    \"end\\n\" +\n    \"return t\";\n\n/**\n * Remove from Indexable Priority Queue\n * Example:\n * \n * EVAL PQREM 1 ns msgid\n * \n * Parameters\n * \n * Keys 1. Namespace\n * Args 1. Identifier\n */\nconst PQREM = \"redis.call('ZREM', KEYS[1]..':pq', ARGV[1])\\n\" +\n    \"redis.call('HDEL', KEYS[1]..':index', ARGV[1])\";\n\n/**\n * Popup from Hash\n * Example:\n * \n * EVAL HPOP 2 key\n * \n * Parameters\n * \n * Keys 1. Hash Key\n * Keys 2. Field Key\n */\nconst HPOP = \"local v = redis.call('HGET', KEYS[1], KEYS[2])\\n\" +\n    \"redis.call('HDEL', KEYS[1], KEYS[2])\\n\" +\n    \"return v\";\n\nexport default class Database{\n    constructor(options){\n        if(options == undefined){\n            options = {};\n        }\n        this.namespace = options['redis_namespace'] || \"httppack\";\n\n        // Buffer mode\n        _.assign(options, {\n            return_buffers: true\n        });\n\n        this.client = redis.createClient(options);\n    }\n\n    _encodePacket(packet){\n        let bufferLength = packet.buffer.length;\n        let rawBuffer = Buffer.allocUnsafe(5 + bufferLength);\n        rawBuffer.writeUInt8(packet.retryTimes, 0);\n        rawBuffer.writeUInt32BE(packet.timestamp, 1);\n        packet.buffer.copy(rawBuffer, 5, 0, bufferLength);\n        return rawBuffer;\n    }\n\n    _decodePacket(rawBuffer){\n        let retryTimes = rawBuffer.readInt8(0);\n        let timestamp = rawBuffer.readUInt32BE(1);\n        let bufferLength = rawBuffer.length - 5;\n        let buffer = Buffer.allocUnsafe(bufferLength);\n        rawBuffer.copy(buffer, 0, 5, 5 + bufferLength);\n        let packet = Decode(buffer);\n        packet.retryTimes = retryTimes;\n        packet.timestamp = timestamp;\n        return packet;\n    }\n\n    generateId(scope){\n        return this.client.incrAsync(`${this.namespace}:${scope}:uniqueid`).then(function(i){\n            return i + (1 << 15);\n        });\n    }\n\n    evalScore(packet){\n        return packet.timestamp;\n    }\n\n    savePacket(scope, packet){\n        return this.client.evalAsync(PQADD, 1, `${this.namespace}:${scope}`, \n            this.evalScore(packet), packet.identifier, this._encodePacket(packet));\n    }\n\n    unconfirmedPacket(scope, limit){\n        let now = moment().unix();\n        return this.client.evalAsync(PQPOP, 1, `${this.namespace}:${scope}`, limit, now).then(function(buffers){\n            return _.map(buffers, function(buffer){\n                return this._decodePacket(buffer);\n            }.bind(this));\n        }.bind(this));\n    }\n\n    confirmPacket(scope, identifier){\n        return this.client.evalAsync(PQREM, 1, `${this.namespace}:${scope}`, identifier);\n    }\n\n    receivePacket(scope, identifier, payload){\n        return this.client.hsetAsync(`${this.namespace}:${scope}:payloads`, identifier, payload);\n    }\n\n    releasePacket(scope, identifier){\n        return this.client.evalAsync(HPOP, 2, `${this.namespace}:${scope}:payloads`, identifier);\n    }\n}"]}